// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16-bit wide.  
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = RAM64[address(t)](t)
 *     Write: If load(t-1) then RAM64[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load == 1, the in value is loaded 
 * into the memory location specified by address.  This value becomes 
 * available through the out output starting from the next time step.
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[0..2], a=lram1, b=lram2, c=lram3, d=lram4, e=lram5, f=lram6, g=lram7, h=lram8);

    RAM8(in=in, load=lram1, address=address[0..2], out=ram1);
    RAM8(in=in, load=lram2, address=address[0..2], out=ram2);
    RAM8(in=in, load=lram3, address=address[0..2], out=ram3);
    RAM8(in=in, load=lram4, address=address[0..2], out=ram4);
    RAM8(in=in, load=lram5, address=address[3..5], out=ram5);
    RAM8(in=in, load=lram6, address=address[3..5], out=ram6);
    RAM8(in=in, load=lram7, address=address[3..5], out=ram7);
    RAM8(in=in, load=lram8, address=address[3..5], out=ram8);
    
    Mux8Way16(a=ram1, b=ram2, c=ram3, d=ram4, e=ram5, f=ram6, g=ram7, h=ram8, sel=address[0..2], out=out);
}
