// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, the ALU executes the inputted instruction according
 * to the Hack machine language specification, as follows. 
 * The D and A in the language specification refer to CPU-resident registers,
 * while M refers to the memory register addressed by A, i.e. to Memory[A].
 * The inM input holds the value of this register. If the current instruction 
 * needs to write a value to M, the value is placed in outM, the address 
 * of the target register is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset == 1, then the 
 * CPU jumps to address 0 (i.e. sets pc = 0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

        IN  inM[16],         // M value input  (M = contents of RAM[A])
            instruction[16], // Instruction for execution
            reset;           // Signals whether to re-start the current program
        // (reset == 1) or continue executing the current
        // program (reset == 0).

        OUT outM[16],        // M value output
            writeM,          // Write into M? 
            addressM[15],    // RAM address (of M)
            pc[15];          // ROM address (of next instruction)

PARTS:
        // First we determine if the instruction is A or C
        And(a=instruction[15], b=true, out=C);
        Not(in=C, out=A);

        // Now we determine if we need to load a new value into ARegister
        Or(a=A, b=instruction[5], out=loadA);
        And(a=C, b=instruction[5], out=saveinA);
        Mux16(a=instruction, b=outalu, sel=saveinA, out=outmux1);
        ARegister(in=outmux1, load=loadA, out=outA, out[0..14]=addressM);

        // Load D?
        And(a=instruction[4], b=C, out=loadD);
        DRegister(in=outalu, load=loadD, out=outD);

        // Write into M?
        And(a=instruction[3], b=C, out=writeM);

        // Is A an address or a value?
        And(a=instruction[12], b=C, out=AisMemory);
        Mux16(a=outA, b=inM, sel=AisMemory, out=outAM);

        // ALU
        ALU(x=outD, y=outAM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outalu, zr=aluzr, ng=alung);

        // Checking whether ALU output was negative or zero
        Not(in=aluzr, out=nzr);
        Not(in=alung, out=nng);

        // Jump conditions: Check output of alu and compare with jump bits
        // Less Than : j1=1,zr=0,ng=1
        And(a=instruction[2],b=nzr,out=aj1nzr);
        And(a=aj1nzr,b=alung,out=lt);

        // Equal : j2=1,zr=1,ng=0
        And(a=instruction[1],b=aluzr,out=aj2zr);
        And(a=aj2zr,b=nng,out=eq);

        // Greater Than : j3=1,zr=0,ng=0
        And(a=instruction[0],b=nzr,out=aj3nzr);
        And(a=aj3nzr,b=nng,out=gt);

        // Diff : j1=1,j3=1,zr=0
        And(a=instruction[2],b=instruction[0],out=andj1j3);
        And(a=andj1j3,b=nzr,out=dfflag);

        // JMP : j1=j2=j3=1
        And(a=andj1j3,b=instruction[1],out=jmpflag);

        // Load Flag of PC
        Or(a=lt,b=eq,out=leflag);
        Or(a=leflag,b=gt,out=legflag);
        Or(a=legflag,b=dfflag,out=legdflag);
        Or(a=legdflag,b=jmpflag,out=legdjflag);
        And(a=C,b=legdjflag,out=jmp);

        // If not a JUMP: Increase counter
        Not(in=jmp, out=pcinc);
        PC(in=outA, load=jmp, inc=pcinc, reset=reset,out[0..14]=pc);
}
